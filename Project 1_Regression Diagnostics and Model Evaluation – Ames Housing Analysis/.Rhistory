library(dplyr)
library(ggplot2)
library(corrplot)
library(RColorBrewer)
library(car)
library(corrplot)
#Importing the dataset
ames <- read.csv("AmesHousing.csv", header=TRUE)
#Importing the dataset
ames <- read.csv("AmesHousing.csv", header=TRUE)
ames
#Summary statistics of the data set
summary(ames)
View(ames)
dim(ames)
head(ames)
tail(ames)
str(ames)
table(ames)
class(ames)
range(ames$Lot.Config)
fortify(ames)
aes(ames)
# Use the cor() function to compute the correlation matrix
cor_matrix <- cor(ames)
# Use the cor() function to compute the correlation matrix
cor(ames)
# Identify numeric columns
numeric_cols <- sapply(ames, is.numeric)
# Use the cor() function to compute the correlation matrix for numeric values
cor_matrix <- cor(ames[, numeric_cols])
# Print the correlation matrix
print(cor_matrix)
#Question 3
# Check for missing values
missing_values <- colSums(is.na(ames))
# Print the columns with missing values
print(missing_values[missing_values > 0])
# Impute missing values with the mean of each column
my_data_imputed <- ames
# Calculate the mean excluding missing values
mean_value <- mean(ames[[col]], na.rm = TRUE)
# Loop through columns with missing values
for (col in names(ames)[missing_values > 0]) {
# Calculate the mean excluding missing values
mean_value <- mean(ames[[col]], na.rm = TRUE)
# Replace missing values with the mean
my_data_imputed[[col]][is.na(ames[[col]])] <- mean_value
}
# Display the first few rows of the imputed dataset
head(my_data_imputed)
#Question 4
# Identify numeric columns
numeric_cols <- sapply(ames, is.numeric)
# Use the cor() function to compute the correlation matrix for numeric values
cor_matrix <- cor(ames[, numeric_cols])
# Print the correlation matrix
print(cor_matrix)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
library(corrplot)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 45)
# Add a title
title("Correlation Matrix")
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 55)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 35)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 15)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 75)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 70)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 65)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 80)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 90)
# Add a title
title("Correlation Matrix")
#Question 6
# Calculate correlations between SalePrice and X variables
correlations <- cor(ames)
# Impute missing values with the mean of each column
ames1 <- ames
# Loop through columns with missing values
for (col in names(ames)[missing_values > 0]) {
# Calculate the mean excluding missing values
mean_value <- mean(ames[[col]], na.rm = TRUE)
# Replace missing values with the mean
ames1[[col]][is.na(ames[[col]])] <- mean_value
}
# Display the first few rows of the imputed dataset
head(ames1)
#Question 4
# Identify numeric columns
numeric_cols <- sapply(ames1, is.numeric)
# Use the cor() function to compute the correlation matrix for numeric values
cor_matrix <- cor(ames1[, numeric_cols])
# Print the correlation matrix
print(cor_matrix)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 90)
# Add a title
title("Correlation Matrix")
#Question 6
# Calculate correlations between SalePrice and X variables
correlations <- cor(ames1)
#Question 6
# Calculate correlations between SalePrice and X variables
correlations <- cor(cor_matrix)
# Find the variable with the highest correlation
highest_corr_variable <- names(which.max(correlations["SalePrice", ]))
# Find the variable with the lowest correlation
lowest_corr_variable <- names(which.min(correlations["SalePrice", ]))
# Find the variable with the correlation closest to 0.5
closest_corr_variable <- names(which.min(abs(correlations["SalePrice", ] - 0.5)))
# Create scatter plots
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix$SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
View(cor_matrix)
View(ames1)
# Scatter plot for the variable with the highest correlation
plot(cor_matrix, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the highest correlation
plot(correlations$SalePrice, correlations[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
#Question 6
# Calculate correlations between SalePrice and X variables
correlations <- cor(cor_matrix)
# Find the variable with the highest correlation
highest_corr_variable <- names(which.max(correlations["SalePrice", ]))
# Find the variable with the lowest correlation
lowest_corr_variable <- names(which.min(correlations["SalePrice", ]))
# Find the variable with the correlation closest to 0.5
closest_corr_variable <- names(which.min(abs(correlations["SalePrice", ] - 0.5)))
# Create scatter plots
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1))
View(ames)
# Scatter plot for the variable with the highest correlation
plot(cor_matrix$SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
if (!(highest_corr_variable %in% colnames(my_data))) {
stop("Variable with the highest correlation not found in the dataset.")
}
if (!(highest_corr_variable %in% colnames(cor_matrix))) {
stop("Variable with the highest correlation not found in the dataset.")
}
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
library(ggplot2)
library(car)
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the lowest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[lowest_corr_variable]],
main = paste("SalePrice vs.", lowest_corr_variable, "Correlation =", round(correlations["SalePrice", lowest_corr_variable], 2)),
xlab = "SalePrice", ylab = lowest_corr_variable, col = "red")
# Scatter plot for the variable with the correlation closest to 0.5
plot(cor_matrix ~ SalePrice, cor_matrix[[closest_corr_variable]],
main = paste("SalePrice vs.", closest_corr_variable, "Correlation =", round(correlations["SalePrice", closest_corr_variable], 2)),
xlab = "SalePrice", ylab = closest_corr_variable, col = "green")
print(correlations)
View(correlations)
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 1)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 3)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 0.5)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the lowest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[lowest_corr_variable]],
main = paste("SalePrice vs.", lowest_corr_variable, "Correlation =", round(correlations["SalePrice", lowest_corr_variable], 2)),
xlab = "SalePrice", ylab = lowest_corr_variable, col = "red")
vector_length <- length(cor_matrix ~ SalePrice)
vector_length
View(cor_matrix)
# Create scatter plots
par(mfrow = c(-1, 3), mar = c(4, 4, 2, 1))
# Create scatter plots
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Create scatter plots
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Create scatter plots
par(mfrow = c(0, 2), mar = c(4, 4, 2, 1))
# Create scatter plots
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Create scatter plots
par(mfrow = c(2, 2), mar = c(2, 3, 1, 2))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Create scatter plots
par(mfrow = c(2, 2), mar = c(5, 4, 4, 2))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Create scatter plots
par(mfrow = c(1, 3), mar = c(5, 4, 4, 2))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]],
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Scatter plot for the variable with the lowest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[lowest_corr_variable]],
main = paste("SalePrice vs.", lowest_corr_variable, "Correlation =", round(correlations["SalePrice", lowest_corr_variable], 2)),
xlab = "SalePrice", ylab = lowest_corr_variable, col = "red")
# Scatter plot for the variable with the correlation closest to 0.5
plot(cor_matrix ~ SalePrice, cor_matrix[[closest_corr_variable]],
main = paste("SalePrice vs.", closest_corr_variable, "Correlation =", round(correlations["SalePrice", closest_corr_variable], 2)),
xlab = "SalePrice", ylab = closest_corr_variable, col = "green")
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]], xlim = c(-1, 1),
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Create scatter plots
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]], xlim = c(-1, 1),
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
#Question 6
# Calculate correlations between SalePrice and X variables
set.seed(123)
correlations <- cor(cor_matrix)
# Find the variable with the highest correlation
highest_corr_variable <- names(which.max(correlations["SalePrice", ]))
# Find the variable with the lowest correlation
lowest_corr_variable <- names(which.min(correlations["SalePrice", ]))
# Find the variable with the correlation closest to 0.5
closest_corr_variable <- names(which.min(abs(correlations["SalePrice", ] - 0.5)))
# Create scatter plots
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1))
# Scatter plot for the variable with the highest correlation
plot(cor_matrix ~ SalePrice, cor_matrix[[highest_corr_variable]], xlim = c(-1, 1),
main = paste("SalePrice vs.", highest_corr_variable, "Correlation =", round(correlations["SalePrice", highest_corr_variable], 2)),
xlab = "SalePrice", ylab = highest_corr_variable, col = "blue")
# Find the variable with the highest correlation
highest_corr_variable <- names(which.max(correlations["SalePrice", ]))
#Question 7
# Fit a multiple linear regression model
model <- lm(Y ~ X1 + X2 + X3, data = cor_matrix)
#Question 7
# Fit a multiple linear regression model
model <- lm(Y ~ X1 + X2 + X3, data = ames1)
#Question 7
# Fit a multiple linear regression model
model <- lm("salePrice" ~ "Lot.Frontage" + "Overall.Qual" + "Year.Built", data = cor_matrix)
#Question 7
# Fit a multiple linear regression model
model <- lm("SalePrice" ~ "Lot.Frontage" + "Overall.Qual" + "Year.Built", data = cor_matrix)
#Question 7
# Fit a multiple linear regression model
model <- lm("SalePrice" ~ "Lot.Frontage" + "Overall.Qual" + "Year.Built", data = ames1)
#Question 7
# Fit a multiple linear regression model
model <- lm("SalePrice" ~ "Lot.Frontage" + "Overall.Qual" + "Year.Built", data = ames1)
#Question 7
# Fit a multiple linear regression model
model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1)
# Display the summary of the regression model
summary(model)
#Question 7
# Fit a multiple linear regression model
model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = cor_matrix)
#Question 7
# Fit a multiple linear regression model
model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1)
correlations <- cor(ames1)
correlations <- cor(numeric_cols)
correlations <- cor(cor_matrix)
#Question 7
# Fit a multiple linear regression model
model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1)
# Display the summary of the regression model
summary(model)
#Question 9
plot(model)
plot(model)
#Question 9
plot(model)
#Check for VIF in regression model
library(car)
vif(model)
#Question 13
# Install and load the leaps package
install.packages("leaps")
library(leaps)
# Fit all possible models and choose the best subset
all_subsets <- regsubsets(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1, method = "exhaustive")
# Choose the best model based on BIC (you can use AIC or adjusted R^2 as well)
best_model <- which.min(summary(all_subsets)$bic)
# Display the best model
summary(all_subsets)$which[best_model, ]
# Fit the preferred model
preferred_model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1)
summary(preferred_model)
# Display the best model
summary(all_subsets)$which[best_model, ]
# Choose the best model based on BIC (you can use AIC or adjusted R^2 as well)
best_model <- which.min(summary(all_subsets)$adjr2)
# Display the best model
summary(all_subsets)$which[best_model, ]
# Fit the preferred model
preferred_model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1)
summary(preferred_model)
plot(preferred_model)
# Display the summary of the regression model
summary(model)
#Question 7
# Fit a multiple linear regression model
model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built + MS.SubClass, data = ames1)
# Display the summary of the regression model
summary(model)
#Question 9
plot(model)
outlierTest(model = fit)
outlierTest(model = model)
#Question 11 - Check for outliers in model
outlierTest(model = model)
# Assuming 'model' is your regression model
hat_values <- hatvalues(model)
# Create a hat plot
plot(hat_values, pch = 19, main = "Hat Plot", xlab = "Observation", ylab = "Leverage")
# Add a horizontal line at the typical threshold for high leverage
abline(h = 2 * nobs(model)/length(hat_values), col = "red", lty = 2)
# Display the summary of the regression model
summary(model)
#Question 2
#Summary statistics of the data set
summary(ames)
View(ames)
dim(ames)
head(ames)
tail(ames)
str(ames)
table(ames)
class(ames)
class(ames)
range(ames$Lot.Config)
range(ames$Year.Built)
range(ames$Yr.Sold)
range(ames$SalePrice)
#Question 3
# Check for missing values
missing_values <- colSums(is.na(ames))
# Print the columns with missing values
print(missing_values[missing_values > 0])
# Impute missing values with the mean of each column
ames1 <- ames
dim(ames)
# Loop through columns with missing values
for (col in names(ames)[missing_values > 0]) {
# Calculate the mean excluding missing values
mean_value <- mean(ames[[col]], na.rm = TRUE)
# Replace missing values with the mean
ames1[[col]][is.na(ames[[col]])] <- mean_value
}
# Display the first few rows of the imputed dataset
head(ames1)
#Question 4
# Identify numeric columns
numeric_cols <- sapply(ames1, is.numeric)
# Use the cor() function to compute the correlation matrix for numeric values
cor_matrix <- cor(ames1[, numeric_cols])
# Print the correlation matrix
print(cor_matrix)
#Question 5
# Customize the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", order = "original", tl.col = "black", tl.srt = 90)
# Add a title
title("Correlation Matrix")
#Question 6
#I couldn't get the code to run, trying to figure out where I messed up!
# Calculate correlations between SalePrice and X variables
set.seed(123)
correlations <- cor(cor_matrix)
# Find the variable with the highest correlation
highest_corr_variable <- names(which.max(correlations["SalePrice", ]))
#Question 7
# Fit a multiple linear regression model
model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built + MS.SubClass, data = ames1)
# Display the summary of the regression model
summary(model)
#Question 9
plot(model)
#Question 10
#Check for VIF in regression model
library(car)
vif(model)
#Question 11 - Check for outliers in model
outlierTest(model = model)
#Leverage values in regression model
hat_values <- hatvalues(model)
# Create a hat plot
plot(hat_values, pch = 19, main = "Hat Plot", xlab = "Observation", ylab = "Leverage")
# Add a horizontal line at the typical threshold for high leverage
abline(h = 2 * nobs(model)/length(hat_values), col = "red", lty = 2)
#Question 13
# Install and load the leaps package
install.packages("leaps")
install.packages("leaps")
library(leaps)
# Fit all possible models and choose the best subset
all_subsets <- regsubsets(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1, method = "exhaustive")
# Choose the best model based on BIC (you can use AIC or adjusted R^2 as well)
best_model <- which.min(summary(all_subsets)$adjr2)
# Display the best model
summary(all_subsets)$which[best_model, ]
# Fit the preferred model
preferred_model <- lm(SalePrice ~ Lot.Frontage + Overall.Qual + Year.Built, data = ames1)
summary(preferred_model)
plot(preferred_model)
summary(preferred_model)
